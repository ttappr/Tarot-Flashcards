

@import './meyerweb-reset';

* {
    box-sizing: border-box;
    user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
}

body {
    --primary-color: #4CAF50;
    --primary-color: #ff7494;
    --secondary-color: #333;

    --primary-color-ripple: #71da74;
    --primary-color-ripple: rgb(209, 165, 184);
}
body {
    background-color: #fffcf5;
}

/*  [[ Notes ]]

    !The ITCSS layers are: 

        ? Settings  -   used with preprocessors and contain font, colors 
                        definitions, etc. This level doesn't apply if not using
                        SASS or other preprocessing.
        ? Tools     -   globally used mixins and functions. Itâ€™s important not 
                        to output any CSS in the first 2 layers. This level
                        doesn't apply unless using a preprocessor.
        * Generic   -   reset and/or normalize styles, box-sizing definition, 
                        etc. This is the first layer which generates actual CSS.
        * Elements /
          Base      -   styling for bare HTML elements (like H1, A, etc.). These
                        come with default styling from the browser so we can 
                        redefine them here.
        * Objects   -   class-based selectors which define undecorated design 
                        patterns, for example media object known from OOCSS
        * Components-   specific UI components. This is where the majority of 
                        our work takes place and our UI components are often 
                        composed of Objects and Components.
        ? Theme     -   If specific theming is needed, it's recommended to go
                        here.
        * Trumps /
        * Utilities -   utilities and helper classes with ability to override 
                        anything which goes before in the triangle, eg. hide 
                        helper class

    The structuring of S/CSS files and rules should flow from less 'specificity'
    to greater specifity in some intuitive semantic fashion.

    !BEM naming consists of Block, Element, Modifier. 
    This is the format: <block>__<element>--<modifier>
        <div class="container">
            <button class="container__button">Maybe Press</button>
            <button class="container__button container__button--accented">
                Definitely Press
            </button>
        </div>

    !Shadow DOM elements can be exposed to external styling by setting the 
    'part' attribute of elements to a suitable name, then using ::part() in
    external selectors. ::theme() is a similar selector utility, but is more 
    global in scope.

    Elements can be prestyled before they're shown to avoid FOUC's.
        my-element:not(:defined) {
            display: inline-block;
            height: 100vh;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }
 */

